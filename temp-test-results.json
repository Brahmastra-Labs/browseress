[
  {
    "suiteName": "Route.js",
    "passed": 6,
    "failed": 7,
    "total": 13,
    "passRate": 46,
    "details": [
      {
        "suite": "Route",
        "name": "should work without handlers",
        "status": "passed"
      },
      {
        "suite": "Route",
        "name": "should not stack overflow with a large sync stack",
        "status": "failed",
        "error": "this.timeout is not a function",
        "stack": "TypeError: this.timeout is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:33:10\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".all",
        "name": "should add handler",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:75:16\n    at next (http://localhost:9000/dist/browseress.bundle.js:31197:14)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:70:9\n    at Layer.handleRequest (http://localhost:9000/dist/browseress.bundle.js:30958:17)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31222:13)\n    at Route.dispatch (http://localhost:9000/dist/browseress.bundle.js:31182:3)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:73:13\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)"
      },
      {
        "suite": ".all",
        "name": "should handle VERBS",
        "status": "passed"
      },
      {
        "suite": ".all",
        "name": "should stack",
        "status": "passed"
      },
      {
        "suite": ".VERB",
        "name": "should support .get",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:134:16\n    at next (http://localhost:9000/dist/browseress.bundle.js:31197:14)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:129:9\n    at Layer.handleRequest (http://localhost:9000/dist/browseress.bundle.js:30958:17)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31222:13)\n    at Route.dispatch (http://localhost:9000/dist/browseress.bundle.js:31182:3)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:132:13\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)"
      },
      {
        "suite": ".VERB",
        "name": "should limit to just .VERB",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:154:16\n    at next (http://localhost:9000/dist/browseress.bundle.js:31197:14)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:149:9\n    at Layer.handleRequest (http://localhost:9000/dist/browseress.bundle.js:30958:17)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31222:13)\n    at Route.dispatch (http://localhost:9000/dist/browseress.bundle.js:31182:3)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:152:13\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)"
      },
      {
        "suite": ".VERB",
        "name": "should allow fallthrough",
        "status": "passed"
      },
      {
        "suite": "errors",
        "name": "should handle errors via arity 4 functions",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:206:16\n    at next (http://localhost:9000/dist/browseress.bundle.js:31197:14)\n    at Layer.handleRequest (http://localhost:9000/dist/browseress.bundle.js:30971:5)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31222:13)\n    at Route.dispatch (http://localhost:9000/dist/browseress.bundle.js:31182:3)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:205:13\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)"
      },
      {
        "suite": "errors",
        "name": "should handle throw",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:232:16\n    at next (http://localhost:9000/dist/browseress.bundle.js:31197:14)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30935:5)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31220:13)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31220:13)\n    at Layer.handleRequest (http://localhost:9000/dist/browseress.bundle.js:30971:5)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31222:13)\n    at Route.dispatch (http://localhost:9000/dist/browseress.bundle.js:31182:3)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:231:13"
      },
      {
        "suite": "errors",
        "name": "should handle throwing inside error handlers",
        "status": "passed"
      },
      {
        "suite": "errors",
        "name": "should handle throw in .all",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:272:16\n    at next (http://localhost:9000/dist/browseress.bundle.js:31197:14)\n    at Layer.handleRequest (http://localhost:9000/dist/browseress.bundle.js:30971:5)\n    at next (http://localhost:9000/dist/browseress.bundle.js:31222:13)\n    at Route.dispatch (http://localhost:9000/dist/browseress.bundle.js:31182:3)\n    at blob:http://localhost:9000/dd6e7022-f160-45e2-bb4c-6f3c47b1b042:271:13\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)"
      },
      {
        "suite": "errors",
        "name": "should handle single error handler",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "Router.js",
    "passed": 34,
    "failed": 5,
    "total": 39,
    "passRate": 87,
    "details": [
      {
        "suite": "Router",
        "name": "should return a function with router methods",
        "status": "passed"
      },
      {
        "suite": "Router",
        "name": "should support .use of other routers",
        "status": "passed"
      },
      {
        "suite": "Router",
        "name": "should support dynamic routes",
        "status": "passed"
      },
      {
        "suite": "Router",
        "name": "should handle blank URL",
        "status": "passed"
      },
      {
        "suite": "Router",
        "name": "should handle missing URL",
        "status": "passed"
      },
      {
        "suite": "Router",
        "name": "handle missing method",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"handle missing method\"",
        "stack": "Error: Timeout waiting for done() in test \"handle missing method\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "Router",
        "name": "should not stack overflow with many registered routes",
        "status": "failed",
        "error": "this.timeout is not a function",
        "stack": "TypeError: this.timeout is not a function\n    at blob:http://localhost:9000/bf25b86e-2c26-4194-9f23-9b894d699f4f:108:10\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "Router",
        "name": "should not stack overflow with a large sync route stack",
        "status": "failed",
        "error": "this.timeout is not a function",
        "stack": "TypeError: this.timeout is not a function\n    at blob:http://localhost:9000/bf25b86e-2c26-4194-9f23-9b894d699f4f:125:10\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "Router",
        "name": "should not stack overflow with a large sync middleware stack",
        "status": "failed",
        "error": "this.timeout is not a function",
        "stack": "TypeError: this.timeout is not a function\n    at blob:http://localhost:9000/bf25b86e-2c26-4194-9f23-9b894d699f4f:152:10\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".handle",
        "name": "should dispatch",
        "status": "passed"
      },
      {
        "suite": ".multiple callbacks",
        "name": "should throw if a callback is null",
        "status": "passed"
      },
      {
        "suite": ".multiple callbacks",
        "name": "should throw if a callback is undefined",
        "status": "passed"
      },
      {
        "suite": ".multiple callbacks",
        "name": "should throw if a callback is not a function",
        "status": "passed"
      },
      {
        "suite": ".multiple callbacks",
        "name": "should not throw if all callbacks are functions",
        "status": "passed"
      },
      {
        "suite": "error",
        "name": "should skip non error middleware",
        "status": "passed"
      },
      {
        "suite": "error",
        "name": "should handle throwing inside routes with params",
        "status": "passed"
      },
      {
        "suite": "error",
        "name": "should handle throwing in handler after async param",
        "status": "passed"
      },
      {
        "suite": "error",
        "name": "should handle throwing inside error handlers",
        "status": "passed"
      },
      {
        "suite": "FQDN",
        "name": "should not obscure FQDNs",
        "status": "passed"
      },
      {
        "suite": "FQDN",
        "name": "should ignore FQDN in search",
        "status": "passed"
      },
      {
        "suite": "FQDN",
        "name": "should ignore FQDN in path",
        "status": "passed"
      },
      {
        "suite": "FQDN",
        "name": "should adjust FQDN req.url",
        "status": "passed"
      },
      {
        "suite": "FQDN",
        "name": "should adjust FQDN req.url with multiple handlers",
        "status": "passed"
      },
      {
        "suite": "FQDN",
        "name": "should adjust FQDN req.url with multiple routed handlers",
        "status": "passed"
      },
      {
        "suite": ".all",
        "name": "should support using .all to capture all http verbs",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should require middleware",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should reject string as middleware",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should reject number as middleware",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should reject null as middleware",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should reject Date as middleware",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should be called for any URL",
        "status": "passed"
      },
      {
        "suite": ".use",
        "name": "should accept array of middleware",
        "status": "passed"
      },
      {
        "suite": ".param",
        "name": "should require function",
        "status": "passed"
      },
      {
        "suite": ".param",
        "name": "should reject non-function",
        "status": "passed"
      },
      {
        "suite": ".param",
        "name": "should call param function when routing VERBS",
        "status": "passed"
      },
      {
        "suite": ".param",
        "name": "should call param function when routing middleware",
        "status": "passed"
      },
      {
        "suite": ".param",
        "name": "should only call once per request",
        "status": "passed"
      },
      {
        "suite": ".param",
        "name": "should call when values differ",
        "status": "passed"
      },
      {
        "suite": "parallel requests",
        "name": "should not mix requests",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not mix requests\"",
        "stack": "Error: Timeout waiting for done() in test \"should not mix requests\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/auth.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/content-negotiation.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/cookie-sessions.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/cookies.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/downloads.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/ejs.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/error-pages.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/error.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/hello-world.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/markdown.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/multi-router.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/mvc.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/params.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/resource.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/route-map.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/route-separation.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/vhost.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "acceptance/web-service.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.all.js",
    "passed": 1,
    "failed": 1,
    "total": 2,
    "passRate": 50,
    "details": [
      {
        "suite": "app.all()",
        "name": "should add a router per method",
        "status": "passed"
      },
      {
        "suite": "app.all()",
        "name": "should run the callback for a method just once",
        "status": "failed",
        "error": "request(...).del is not a function",
        "stack": "TypeError: request(...).del is not a function\n    at blob:http://localhost:9000/6aaeb782-3431-42be-a624-e3fe74f9e63b:51:6\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.head.js",
    "passed": 3,
    "failed": 0,
    "total": 3,
    "passRate": 100,
    "details": [
      {
        "suite": "HEAD",
        "name": "should default to GET",
        "status": "passed"
      },
      {
        "suite": "HEAD",
        "name": "should output the same headers as GET requests",
        "status": "passed"
      },
      {
        "suite": "app.head()",
        "name": "should override",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "app.locals.js",
    "passed": 0,
    "failed": 2,
    "total": 2,
    "passRate": 0,
    "details": [
      {
        "suite": ".locals",
        "name": "should default object with null prototype",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/a1952145-40eb-4ec3-9b79-d86962456013:26:14\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".settings",
        "name": "should contain app settings ",
        "status": "failed",
        "error": "assert.ok is not a function",
        "stack": "TypeError: assert.ok is not a function\n    at blob:http://localhost:9000/a1952145-40eb-4ec3-9b79-d86962456013:35:16\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.options.js",
    "passed": 4,
    "failed": 3,
    "total": 7,
    "passRate": 57,
    "details": [
      {
        "suite": "OPTIONS",
        "name": "should default to the routes defined",
        "status": "passed"
      },
      {
        "suite": "OPTIONS",
        "name": "should only include each method once",
        "status": "passed"
      },
      {
        "suite": "OPTIONS",
        "name": "should not be affected by app.all",
        "status": "passed"
      },
      {
        "suite": "OPTIONS",
        "name": "should not respond if the path is not defined",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not respond if the path is not defined\"",
        "stack": "Error: Timeout waiting for done() in test \"should not respond if the path is not defined\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "OPTIONS",
        "name": "should forward requests down the middleware chain",
        "status": "passed"
      },
      {
        "suite": "when error occurs in response handler",
        "name": "should pass error to callback",
        "status": "failed",
        "error": "Expected body true but got GET, HEAD",
        "stack": "Error: Expected body true but got GET, HEAD\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "app.options()",
        "name": "should override the default behavior",
        "status": "failed",
        "error": "Expected body Allow but got GET",
        "stack": "Error: Expected body Allow but got GET\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.param.js",
    "passed": 13,
    "failed": 0,
    "total": 13,
    "passRate": 100,
    "details": [
      {
        "suite": ".param(names, fn)",
        "name": "should map the array",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should map logic for a single param",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should only call once per request",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should call when values differ",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should support altering req.params across routes",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should not invoke without route handler",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should work with encoded values",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should catch thrown error",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should catch thrown secondary error",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should defer to next route",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should defer all the param routes",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should not call when values differ on error",
        "status": "passed"
      },
      {
        "suite": ".param(name, fn)",
        "name": "should call when values differ when using \"next\"",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.request.js",
    "passed": 5,
    "failed": 0,
    "total": 5,
    "passRate": 100,
    "details": [
      {
        "suite": ".request",
        "name": "should extend the request prototype",
        "status": "passed"
      },
      {
        "suite": ".request",
        "name": "should only extend for the referenced app",
        "status": "passed"
      },
      {
        "suite": ".request",
        "name": "should inherit to sub apps",
        "status": "passed"
      },
      {
        "suite": ".request",
        "name": "should allow sub app to override",
        "status": "passed"
      },
      {
        "suite": ".request",
        "name": "should not pollute parent app",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.response.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "app.route.js",
    "passed": 9,
    "failed": 1,
    "total": 10,
    "passRate": 90,
    "details": [
      {
        "suite": "app.route",
        "name": "should return a new route",
        "status": "passed"
      },
      {
        "suite": "app.route",
        "name": "should all .VERB after .all",
        "status": "passed"
      },
      {
        "suite": "app.route",
        "name": "should support dynamic routes",
        "status": "passed"
      },
      {
        "suite": "app.route",
        "name": "should not error on empty routes",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not error on empty routes\"",
        "stack": "Error: Timeout waiting for done() in test \"should not error on empty routes\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "promise support",
        "name": "should pass rejected promise value",
        "status": "passed"
      },
      {
        "suite": "promise support",
        "name": "should pass rejected promise without value",
        "status": "passed"
      },
      {
        "suite": "promise support",
        "name": "should ignore resolved promise",
        "status": "passed"
      },
      {
        "suite": "error handling",
        "name": "should pass rejected promise value",
        "status": "passed"
      },
      {
        "suite": "error handling",
        "name": "should pass rejected promise without value",
        "status": "passed"
      },
      {
        "suite": "error handling",
        "name": "should ignore resolved promise",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.routes.error.js",
    "passed": 1,
    "failed": 1,
    "total": 2,
    "passRate": 50,
    "details": [
      {
        "suite": ".VERB()",
        "name": "should not get invoked without error handler on error",
        "status": "passed"
      },
      {
        "suite": ".VERB()",
        "name": "should only call an error handling routing callback when an error is propagated",
        "status": "failed",
        "error": "Expected status 204 but got 500",
        "stack": "Error: Expected status 204 but got 500\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "app.use.js",
    "passed": 22,
    "failed": 5,
    "total": 27,
    "passRate": 81,
    "details": [
      {
        "suite": "app",
        "name": "should emit \"mount\" when mounted",
        "status": "passed"
      },
      {
        "suite": ".use(app)",
        "name": "should mount the app",
        "status": "passed"
      },
      {
        "suite": ".use(app)",
        "name": "should support mount-points",
        "status": "passed"
      },
      {
        "suite": ".use(app)",
        "name": "should set the child's .parent",
        "status": "passed"
      },
      {
        "suite": ".use(app)",
        "name": "should support dynamic routes",
        "status": "passed"
      },
      {
        "suite": ".use(app)",
        "name": "should support mounted app anywhere",
        "status": "passed"
      },
      {
        "suite": ".use(middleware)",
        "name": "should accept multiple arguments",
        "status": "passed"
      },
      {
        "suite": ".use(middleware)",
        "name": "should invoke middleware for all requests",
        "status": "passed"
      },
      {
        "suite": ".use(middleware)",
        "name": "should accept array of middleware",
        "status": "passed"
      },
      {
        "suite": ".use(middleware)",
        "name": "should accept multiple arrays of middleware",
        "status": "passed"
      },
      {
        "suite": ".use(middleware)",
        "name": "should accept nested arrays of middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should require middleware",
        "status": "failed",
        "error": "Expected error \"TypeError: app.use() requires a middleware function\" but got \"app.use() requires a middleware function\"",
        "stack": "Error: Expected error \"TypeError: app.use() requires a middleware function\" but got \"app.use() requires a middleware function\"\n    at window.assert.throws (http://localhost:9000/examples/express-test-harness/:878:19)\n    at blob:http://localhost:9000/39d8982f-a14e-4964-b483-fa513cd1bf59:277:14\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should reject string as middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should reject number as middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should reject null as middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should reject Date as middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should strip path from req.url",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should accept multiple arguments",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should invoke middleware for all requests starting with path",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should invoke middleware for all requests starting with path\"",
        "stack": "Error: Timeout waiting for done() in test \"should invoke middleware for all requests starting with path\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should work if path has trailing slash",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should work if path has trailing slash\"",
        "stack": "Error: Timeout waiting for done() in test \"should work if path has trailing slash\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should accept array of middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should accept multiple arrays of middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should accept nested arrays of middleware",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should support array of paths",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should support array of paths\"",
        "stack": "Error: Timeout waiting for done() in test \"should support array of paths\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should support array of paths with middleware array",
        "status": "passed"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should support regexp path",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should support regexp path\"",
        "stack": "Error: Timeout waiting for done() in test \"should support regexp path\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": ".use(path, middleware)",
        "name": "should support empty string path",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "config.js",
    "passed": 24,
    "failed": 2,
    "total": 26,
    "passRate": 92,
    "details": [
      {
        "suite": ".set()",
        "name": "should set a value",
        "status": "passed"
      },
      {
        "suite": ".set()",
        "name": "should set prototype values",
        "status": "passed"
      },
      {
        "suite": ".set()",
        "name": "should return the app",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toBe')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toBe')\n    at blob:http://localhost:9000/dd1c9a5c-adc1-47a5-88f9-273ccb2beda9:38:28\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".set()",
        "name": "should return the app when undefined",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toBe')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toBe')\n    at blob:http://localhost:9000/dd1c9a5c-adc1-47a5-88f9-273ccb2beda9:43:28\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".set()",
        "name": "should return set value",
        "status": "passed"
      },
      {
        "suite": ".set()",
        "name": "should return undefined for prototype values",
        "status": "passed"
      },
      {
        "suite": "\"etag\"",
        "name": "should throw on bad value",
        "status": "passed"
      },
      {
        "suite": "\"etag\"",
        "name": "should set \"etag fn\"",
        "status": "passed"
      },
      {
        "suite": "\"trust proxy\"",
        "name": "should set \"trust proxy fn\"",
        "status": "passed"
      },
      {
        "suite": ".get()",
        "name": "should return undefined when unset",
        "status": "passed"
      },
      {
        "suite": ".get()",
        "name": "should return undefined for prototype values",
        "status": "passed"
      },
      {
        "suite": ".get()",
        "name": "should otherwise return the value",
        "status": "passed"
      },
      {
        "suite": "when mounted",
        "name": "should default to the parent app",
        "status": "passed"
      },
      {
        "suite": "when mounted",
        "name": "should given precedence to the child",
        "status": "passed"
      },
      {
        "suite": "when mounted",
        "name": "should inherit \"trust proxy\" setting",
        "status": "passed"
      },
      {
        "suite": "when mounted",
        "name": "should prefer child \"trust proxy\" setting",
        "status": "passed"
      },
      {
        "suite": ".enable()",
        "name": "should set the value to true",
        "status": "passed"
      },
      {
        "suite": ".enable()",
        "name": "should set prototype values",
        "status": "passed"
      },
      {
        "suite": ".disable()",
        "name": "should set the value to false",
        "status": "passed"
      },
      {
        "suite": ".disable()",
        "name": "should set prototype values",
        "status": "passed"
      },
      {
        "suite": ".enabled()",
        "name": "should default to false",
        "status": "passed"
      },
      {
        "suite": ".enabled()",
        "name": "should return true when set",
        "status": "passed"
      },
      {
        "suite": ".enabled()",
        "name": "should default to false for prototype values",
        "status": "passed"
      },
      {
        "suite": ".disabled()",
        "name": "should default to true",
        "status": "passed"
      },
      {
        "suite": ".disabled()",
        "name": "should return false when set",
        "status": "passed"
      },
      {
        "suite": ".disabled()",
        "name": "should default to true for prototype values",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "express.json.js",
    "passed": 9,
    "failed": 51,
    "total": 60,
    "passRate": 15,
    "details": [
      {
        "suite": "express.json()",
        "name": "should parse JSON",
        "status": "passed"
      },
      {
        "suite": "express.json()",
        "name": "should handle Content-Length: 0",
        "status": "failed",
        "error": "Expected body {} but got null",
        "stack": "Error: Expected body {} but got null\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.json()",
        "name": "should handle empty message-body",
        "status": "failed",
        "error": "Expected body {} but got null",
        "stack": "Error: Expected body {} but got null\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.json()",
        "name": "should handle no message-body",
        "status": "failed",
        "error": "request(...).post(...).set(...).unset is not a function",
        "stack": "TypeError: request(...).post(...).set(...).unset is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:55:8\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "express.json()",
        "name": "should 400 when only whitespace",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "express.json()",
        "name": "should 400 when invalid content-length",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "express.json()",
        "name": "should handle duplicated middleware",
        "status": "passed"
      },
      {
        "suite": "when JSON is invalid",
        "name": "should 400 for bad token",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "when JSON is invalid",
        "name": "should 400 for incomplete",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "when JSON is invalid",
        "name": "should include original body on error object",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with Content-Length",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with chunked encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:154:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when inflated body over limit",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:164:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should accept number of bytes",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should not change when options altered",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should not hang response",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:196:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should not error when inflating",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:207:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when false",
        "name": "should not accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:222:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when true",
        "name": "should accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:236:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when undefined",
        "name": "should 400 on primitives",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "when false",
        "name": "should parse primitives",
        "status": "passed"
      },
      {
        "suite": "when true",
        "name": "should not parse primitives",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "when true",
        "name": "should not parse primitives with leading whitespaces",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "when true",
        "name": "should allow leading whitespaces in JSON",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got    { \"user\": \"tobi\" }",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got    { \"user\": \"tobi\" }\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should include correct message in stack trace",
        "status": "failed",
        "error": "Expected body function (res) {\n    assert.ok(res.text.indexOf(str) !== -1,\n      'expected \\'' + res.text + '\\' to contain \\'' + str + '\\'')\n  } but got true",
        "stack": "Error: Expected body function (res) {\n    assert.ok(res.text.indexOf(str) !== -1,\n      'expected \\'' + res.text + '\\' to contain \\'' + str + '\\'')\n  } but got true\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when \"application/vnd.api+json\"",
        "name": "should parse JSON for custom type",
        "status": "passed"
      },
      {
        "suite": "when \"application/vnd.api+json\"",
        "name": "should ignore standard type",
        "status": "failed",
        "error": "Expected body  but got {\"user\":\"tobi\"}",
        "stack": "Error: Expected body  but got {\"user\":\"tobi\"}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"application/json\", \"application/vnd.api+json\"]",
        "name": "should parse JSON for \"application/json\"",
        "status": "passed"
      },
      {
        "suite": "when [\"application/json\", \"application/vnd.api+json\"]",
        "name": "should parse JSON for \"application/vnd.api+json\"",
        "status": "passed"
      },
      {
        "suite": "when [\"application/json\", \"application/vnd.api+json\"]",
        "name": "should ignore \"application/x-json\"",
        "status": "failed",
        "error": "Expected body  but got {\"user\":\"tobi\"}",
        "stack": "Error: Expected body  but got {\"user\":\"tobi\"}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when a function",
        "name": "should parse when truthy value returned",
        "status": "passed"
      },
      {
        "suite": "when a function",
        "name": "should work without content-type",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:391:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when a function",
        "name": "should not invoke without a body",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not invoke without a body\"",
        "stack": "Error: Timeout waiting for done() in test \"should not invoke without a body\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "with verify option",
        "name": "should assert value if function",
        "status": "passed"
      },
      {
        "suite": "with verify option",
        "name": "should error from verify",
        "status": "failed",
        "error": "Expected status 403 but got 200",
        "stack": "Error: Expected status 403 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow custom codes",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow custom type",
        "status": "failed",
        "error": "Expected status 403 but got 200",
        "stack": "Error: Expected status 403 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should include original body on error object",
        "status": "failed",
        "error": "Expected status 403 but got 200",
        "stack": "Error: Expected status 403 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow pass-through",
        "status": "passed"
      },
      {
        "suite": "with verify option",
        "name": "should work with different charsets",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:501:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with verify option",
        "name": "should 415 on unknown charset prior to verify",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:514:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when unmatched content-type",
        "status": "failed",
        "error": "Expected body  but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body  but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflated",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:585:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflate error",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:596:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when parse error",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when limit exceeded",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:542:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "charset",
        "name": "should parse utf-8",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:631:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should parse utf-16",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:638:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should parse when content-length != char length",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:646:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should default to utf-8",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:653:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should fail on unknown charset",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:660:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should parse without encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:673:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support identity encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:681:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support gzip encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:689:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support deflate encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:697:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should be case-insensitive",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:705:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should 415 on unknown encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:713:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should 400 on malformed encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:721:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should 413 when inflated value exceeds limit",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/e451296e-58b9-496c-a7a5-3277cf3216fd:730:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "express.raw.js",
    "passed": 1,
    "failed": 37,
    "total": 38,
    "passRate": 3,
    "details": [
      {
        "suite": "express.raw()",
        "name": "should parse application/octet-stream",
        "status": "failed",
        "error": "Expected body [object Object] but got the user is tobi",
        "stack": "Error: Expected body [object Object] but got the user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.raw()",
        "name": "should 400 when invalid content-length",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "express.raw()",
        "name": "should handle Content-Length: 0",
        "status": "failed",
        "error": "Expected body [object Object] but got null",
        "stack": "Error: Expected body [object Object] but got null\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.raw()",
        "name": "should handle empty message-body",
        "status": "failed",
        "error": "Expected body [object Object] but got ",
        "stack": "Error: Expected body [object Object] but got \n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.raw()",
        "name": "should handle duplicated middleware",
        "status": "failed",
        "error": "Expected body [object Object] but got the user is tobi",
        "stack": "Error: Expected body [object Object] but got the user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with Content-Length",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:109:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with chunked encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:119:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when inflated body over limit",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:128:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should accept number of bytes",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:137:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should not change when options altered",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:150:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should not hang response",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:159:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should not error when inflating",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:170:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when false",
        "name": "should not accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:185:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when true",
        "name": "should accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:199:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when \"application/vnd+octets\"",
        "name": "should parse for custom type",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:214:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when \"application/vnd+octets\"",
        "name": "should ignore standard type",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:221:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when [\"application/octet-stream\", \"application/vnd+octets\"]",
        "name": "should parse \"application/octet-stream\"",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:236:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when [\"application/octet-stream\", \"application/vnd+octets\"]",
        "name": "should parse \"application/vnd+octets\"",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:243:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when [\"application/octet-stream\", \"application/vnd+octets\"]",
        "name": "should ignore \"application/x-foo\"",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:250:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when a function",
        "name": "should parse when truthy value returned",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:265:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when a function",
        "name": "should work without content-type",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:277:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when a function",
        "name": "should not invoke without a body",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not invoke without a body\"",
        "stack": "Error: Timeout waiting for done() in test \"should not invoke without a body\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "with verify option",
        "name": "should assert value is function",
        "status": "passed"
      },
      {
        "suite": "with verify option",
        "name": "should error from verify",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:310:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with verify option",
        "name": "should allow custom codes",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:326:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with verify option",
        "name": "should allow pass-through",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:339:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store",
        "status": "failed",
        "error": "Expected body [object Object] but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:367:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body [object Object] but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:367:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when unmatched content-type",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:367:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:367:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflated",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:413:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflate error",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:424:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when limit exceeded",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:367:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:367:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "charset",
        "name": "should ignore charset",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:449:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should parse without encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:462:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support identity encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:470:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support gzip encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:478:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support deflate encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:486:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should be case-insensitive",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:494:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should 415 on unknown encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/c80628d3-e047-4cf8-95a9-309452fb36e5:502:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "express.text.js",
    "passed": 1,
    "failed": 44,
    "total": 45,
    "passRate": 2,
    "details": [
      {
        "suite": "express.text()",
        "name": "should parse text/plain",
        "status": "failed",
        "error": "Expected body \"user is tobi\" but got user is tobi",
        "stack": "Error: Expected body \"user is tobi\" but got user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.text()",
        "name": "should 400 when invalid content-length",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "express.text()",
        "name": "should handle Content-Length: 0",
        "status": "failed",
        "error": "Expected body \"\" but got null",
        "stack": "Error: Expected body \"\" but got null\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.text()",
        "name": "should handle empty message-body",
        "status": "failed",
        "error": "Expected body \"\" but got ",
        "stack": "Error: Expected body \"\" but got \n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.text()",
        "name": "should handle duplicated middleware",
        "status": "failed",
        "error": "Expected body \"user is tobi\" but got user is tobi",
        "stack": "Error: Expected body \"user is tobi\" but got user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with defaultCharset option",
        "name": "should change default charset",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:98:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with defaultCharset option",
        "name": "should honor content-type charset",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:106:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with Content-Length",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with chunked encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:128:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when inflated body over limit",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:137:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should accept number of bytes",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should not change when options altered",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should not hang response",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:169:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should not error when inflating",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:180:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when false",
        "name": "should not accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:197:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when true",
        "name": "should accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:211:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when \"text/html\"",
        "name": "should parse for custom type",
        "status": "failed",
        "error": "Expected body \"<b>tobi</b>\" but got <b>tobi</b>",
        "stack": "Error: Expected body \"<b>tobi</b>\" but got <b>tobi</b>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when \"text/html\"",
        "name": "should ignore standard type",
        "status": "failed",
        "error": "Expected body  but got user is tobi",
        "stack": "Error: Expected body  but got user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"text/html\", \"text/plain\"]",
        "name": "should parse \"text/html\"",
        "status": "failed",
        "error": "Expected body \"<b>tobi</b>\" but got <b>tobi</b>",
        "stack": "Error: Expected body \"<b>tobi</b>\" but got <b>tobi</b>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"text/html\", \"text/plain\"]",
        "name": "should parse \"text/plain\"",
        "status": "failed",
        "error": "Expected body \"tobi\" but got tobi",
        "stack": "Error: Expected body \"tobi\" but got tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"text/html\", \"text/plain\"]",
        "name": "should ignore \"text/xml\"",
        "status": "failed",
        "error": "Expected body  but got <user>tobi</user>",
        "stack": "Error: Expected body  but got <user>tobi</user>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when a function",
        "name": "should parse when truthy value returned",
        "status": "failed",
        "error": "Expected body \"user is tobi\" but got user is tobi",
        "stack": "Error: Expected body \"user is tobi\" but got user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when a function",
        "name": "should work without content-type",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:293:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when a function",
        "name": "should not invoke without a body",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not invoke without a body\"",
        "stack": "Error: Timeout waiting for done() in test \"should not invoke without a body\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "with verify option",
        "name": "should assert value is function",
        "status": "passed"
      },
      {
        "suite": "with verify option",
        "name": "should error from verify",
        "status": "failed",
        "error": "Expected status 403 but got 200",
        "stack": "Error: Expected status 403 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow custom codes",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow pass-through",
        "status": "failed",
        "error": "Expected body \"user is tobi\" but got user is tobi",
        "stack": "Error: Expected body \"user is tobi\" but got user is tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with verify option",
        "name": "should 415 on unknown charset prior to verify",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:371:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store",
        "status": "failed",
        "error": "Expected body \"user is tobi\" but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:399:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body \"user is tobi\" but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:399:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when unmatched content-type",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:399:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:399:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflated",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:441:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflate error",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:452:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when limit exceeded",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:399:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:399:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "charset",
        "name": "should parse utf-8",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:477:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should parse codepage charsets",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:484:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should parse when content-length != char length",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:492:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should default to utf-8",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:499:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should 415 on unknown charset",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:506:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should parse without encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:519:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support identity encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:527:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support gzip encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:535:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support deflate encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:543:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should be case-insensitive",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:551:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should 415 on unknown encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f2d47688-9d33-4d19-a4e7-06482caa95ef:559:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "express.urlencoded.js",
    "passed": 13,
    "failed": 55,
    "total": 68,
    "passRate": 19,
    "details": [
      {
        "suite": "express.urlencoded()",
        "name": "should parse x-www-form-urlencoded",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.urlencoded()",
        "name": "should 400 when invalid content-length",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "express.urlencoded()",
        "name": "should handle Content-Length: 0",
        "status": "failed",
        "error": "Expected body {} but got ",
        "stack": "Error: Expected body {} but got \n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.urlencoded()",
        "name": "should handle empty message-body",
        "status": "failed",
        "error": "Expected body {} but got ",
        "stack": "Error: Expected body {} but got \n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.urlencoded()",
        "name": "should handle duplicated middleware",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "express.urlencoded()",
        "name": "should not parse extended syntax",
        "status": "failed",
        "error": "Expected body {\"user[name][first]\":\"Tobi\"} but got user[name][first]=Tobi",
        "stack": "Error: Expected body {\"user[name][first]\":\"Tobi\"} but got user[name][first]=Tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when false",
        "name": "should not parse extended syntax",
        "status": "failed",
        "error": "Expected body {\"user[name][first]\":\"Tobi\"} but got user[name][first]=Tobi",
        "stack": "Error: Expected body {\"user[name][first]\":\"Tobi\"} but got user[name][first]=Tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when false",
        "name": "should parse multiple key instances",
        "status": "failed",
        "error": "Expected body {\"user\":[\"Tobi\",\"Loki\"]} but got user=Tobi&user=Loki",
        "stack": "Error: Expected body {\"user\":[\"Tobi\",\"Loki\"]} but got user=Tobi&user=Loki\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse multiple key instances",
        "status": "failed",
        "error": "Expected body {\"user\":[\"Tobi\",\"Loki\"]} but got user=Tobi&user=Loki",
        "stack": "Error: Expected body {\"user\":[\"Tobi\",\"Loki\"]} but got user=Tobi&user=Loki\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse extended syntax",
        "status": "failed",
        "error": "Expected body {\"user\":{\"name\":{\"first\":\"Tobi\"}}} but got user[name][first]=Tobi",
        "stack": "Error: Expected body {\"user\":{\"name\":{\"first\":\"Tobi\"}}} but got user[name][first]=Tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse parameters with dots",
        "status": "failed",
        "error": "Expected body {\"user.name\":\"Tobi\"} but got user.name=Tobi",
        "stack": "Error: Expected body {\"user.name\":\"Tobi\"} but got user.name=Tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse fully-encoded extended syntax",
        "status": "failed",
        "error": "Expected body {\"user\":{\"name\":{\"first\":\"Tobi\"}}} but got user%5Bname%5D%5Bfirst%5D=Tobi",
        "stack": "Error: Expected body {\"user\":{\"name\":{\"first\":\"Tobi\"}}} but got user%5Bname%5D%5Bfirst%5D=Tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse array index notation",
        "status": "failed",
        "error": "Expected body {\"foo\":[\"bar\",\"baz\"]} but got foo[0]=bar&foo[1]=baz",
        "stack": "Error: Expected body {\"foo\":[\"bar\",\"baz\"]} but got foo[0]=bar&foo[1]=baz\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse array index notation with large array",
        "status": "passed"
      },
      {
        "suite": "when true",
        "name": "should parse array of objects syntax",
        "status": "failed",
        "error": "Expected body {\"foo\":[{\"bar\":\"baz\",\"fizz\":\"buzz\"},\"done!\"]} but got foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!",
        "stack": "Error: Expected body {\"foo\":[{\"bar\":\"baz\",\"fizz\":\"buzz\"},\"done!\"]} but got foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when true",
        "name": "should parse deep object",
        "status": "passed"
      },
      {
        "suite": "when false",
        "name": "should not accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:237:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when true",
        "name": "should accept content-encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:251:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with Content-Length",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when over limit with chunked encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:274:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should 413 when inflated body over limit",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:284:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should accept number of bytes",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should not change when options altered",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with limit option",
        "name": "should not hang response",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:316:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with limit option",
        "name": "should not error when inflating",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:327:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with extended: false",
        "name": "should reject 0",
        "status": "passed"
      },
      {
        "suite": "with extended: false",
        "name": "should reject string",
        "status": "passed"
      },
      {
        "suite": "with extended: false",
        "name": "should 413 if over limit",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with extended: false",
        "name": "should work when at the limit",
        "status": "passed"
      },
      {
        "suite": "with extended: false",
        "name": "should work if number is floating point",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with extended: false",
        "name": "should work with large limit",
        "status": "passed"
      },
      {
        "suite": "with extended: false",
        "name": "should work with Infinity limit",
        "status": "passed"
      },
      {
        "suite": "with extended: true",
        "name": "should reject 0",
        "status": "passed"
      },
      {
        "suite": "with extended: true",
        "name": "should reject string",
        "status": "passed"
      },
      {
        "suite": "with extended: true",
        "name": "should 413 if over limit",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with extended: true",
        "name": "should work when at the limit",
        "status": "passed"
      },
      {
        "suite": "with extended: true",
        "name": "should work if number is floating point",
        "status": "failed",
        "error": "Expected status 413 but got 200",
        "stack": "Error: Expected status 413 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with extended: true",
        "name": "should work with large limit",
        "status": "passed"
      },
      {
        "suite": "with extended: true",
        "name": "should work with Infinity limit",
        "status": "passed"
      },
      {
        "suite": "when \"application/vnd.x-www-form-urlencoded\"",
        "name": "should parse for custom type",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when \"application/vnd.x-www-form-urlencoded\"",
        "name": "should ignore standard type",
        "status": "failed",
        "error": "Expected body  but got user=tobi",
        "stack": "Error: Expected body  but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"urlencoded\", \"application/x-pairs\"]",
        "name": "should parse \"application/x-www-form-urlencoded\"",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"urlencoded\", \"application/x-pairs\"]",
        "name": "should parse \"application/x-pairs\"",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when [\"urlencoded\", \"application/x-pairs\"]",
        "name": "should ignore application/x-foo",
        "status": "failed",
        "error": "Expected body  but got user=tobi",
        "stack": "Error: Expected body  but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when a function",
        "name": "should parse when truthy value returned",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when a function",
        "name": "should work without content-type",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:522:14\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when a function",
        "name": "should not invoke without a body",
        "status": "failed",
        "error": "Timeout waiting for done() in test \"should not invoke without a body\"",
        "stack": "Error: Timeout waiting for done() in test \"should not invoke without a body\"\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:479:20"
      },
      {
        "suite": "with verify option",
        "name": "should assert value if function",
        "status": "passed"
      },
      {
        "suite": "with verify option",
        "name": "should error from verify",
        "status": "failed",
        "error": "Expected status 403 but got 200",
        "stack": "Error: Expected status 403 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow custom codes",
        "status": "failed",
        "error": "Expected status 400 but got 200",
        "stack": "Error: Expected status 400 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow custom type",
        "status": "failed",
        "error": "Expected status 403 but got 200",
        "stack": "Error: Expected status 403 but got 200\n    at Object.end (http://localhost:9000/examples/express-test-harness/:690:27)"
      },
      {
        "suite": "with verify option",
        "name": "should allow pass-through",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got user=tobi",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got user=tobi\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with verify option",
        "name": "should 415 on unknown charset prior to verify",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:617:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store",
        "status": "failed",
        "error": "Expected body {\"user\":\"tobi\"} but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:645:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body {\"user\":\"tobi\"} but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:645:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when unmatched content-type",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:645:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:645:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflated",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:687:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when inflate error",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:698:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "async local storage",
        "name": "should persist store when limit exceeded",
        "status": "failed",
        "error": "Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:645:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>",
        "stack": "Error: Expected body x-store-foo but got <pre>TypeError: Cannot read properties of undefined (reading 'getStore')\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:645:43\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30922:17)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)\n    at next (http://localhost:9000/dist/browseress.bundle.js:30338:5)\n    at Layer.handleError (http://localhost:9000/dist/browseress.bundle.js:30917:12)\n    at trimPrefix (http://localhost:9000/dist/browseress.bundle.js:30387:13)\n    at http://localhost:9000/dist/browseress.bundle.js:30344:9\n    at processParams (http://localhost:9000/dist/browseress.bundle.js:30629:12)</pre>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "charset",
        "name": "should parse utf-8",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:723:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should parse when content-length != char length",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:731:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should default to utf-8",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:738:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "charset",
        "name": "should fail on unknown charset",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:745:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should parse without encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:758:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support identity encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:766:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support gzip encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:774:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should support deflate encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:782:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should be case-insensitive",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:790:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "encoding",
        "name": "should 415 on unknown encoding",
        "status": "failed",
        "error": "test.write is not a function",
        "stack": "TypeError: test.write is not a function\n    at blob:http://localhost:9000/f17c2c28-3fec-4df3-a71b-dc5347c8b155:798:12\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "regression.js",
    "passed": 1,
    "failed": 0,
    "total": 1,
    "passRate": 100,
    "details": [
      {
        "suite": "throw after .end()",
        "name": "should fail gracefully",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.accepts.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.acceptsCharsets.js",
    "passed": 3,
    "failed": 0,
    "total": 3,
    "passRate": 100,
    "details": [
      {
        "suite": "when Accept-Charset is not present",
        "name": "should return true",
        "status": "passed"
      },
      {
        "suite": "when Accept-Charset is present",
        "name": "should return true",
        "status": "passed"
      },
      {
        "suite": "when Accept-Charset is present",
        "name": "should return false otherwise",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.acceptsEncodings.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.acceptsLanguages.js",
    "passed": 3,
    "failed": 0,
    "total": 3,
    "passRate": 100,
    "details": [
      {
        "suite": ".acceptsLanguages",
        "name": "should return language if accepted",
        "status": "passed"
      },
      {
        "suite": ".acceptsLanguages",
        "name": "should be false if language not accepted",
        "status": "passed"
      },
      {
        "suite": "when Accept-Language is not present",
        "name": "should always return language",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.baseUrl.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.fresh.js",
    "passed": 4,
    "failed": 0,
    "total": 4,
    "passRate": 100,
    "details": [
      {
        "suite": ".fresh",
        "name": "should return true when the resource is not modified",
        "status": "passed"
      },
      {
        "suite": ".fresh",
        "name": "should return false when the resource is modified",
        "status": "passed"
      },
      {
        "suite": ".fresh",
        "name": "should return false without response headers",
        "status": "passed"
      },
      {
        "suite": ".fresh",
        "name": "should ignore \"If-Modified-Since\" when \"If-None-Match\" is present",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.get.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.host.js",
    "passed": 10,
    "failed": 0,
    "total": 10,
    "passRate": 100,
    "details": [
      {
        "suite": ".host",
        "name": "should return the Host when present",
        "status": "passed"
      },
      {
        "suite": ".host",
        "name": "should strip port number",
        "status": "passed"
      },
      {
        "suite": ".host",
        "name": "should return undefined otherwise",
        "status": "passed"
      },
      {
        "suite": ".host",
        "name": "should work with IPv6 Host",
        "status": "passed"
      },
      {
        "suite": ".host",
        "name": "should work with IPv6 Host and port",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should respect X-Forwarded-Host",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should ignore X-Forwarded-Host if socket addr not trusted",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should default to Host",
        "status": "passed"
      },
      {
        "suite": "when trusting hop count",
        "name": "should respect X-Forwarded-Host",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is disabled",
        "name": "should ignore X-Forwarded-Host",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.hostname.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.ip.js",
    "passed": 4,
    "failed": 2,
    "total": 6,
    "passRate": 67,
    "details": [
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should return the client addr",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should return the addr after trusted proxy based on count",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should return the addr after trusted proxy based on list",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should return the addr after trusted proxy, from sub app",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is disabled",
        "name": "should return the remote address",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'address')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'address')\n    at getExpectedClientAddress (blob:http://localhost:9000/d5192c2d-d0e8-41b5-8158-b6cdee71cb5e:126:17)\n    at blob:http://localhost:9000/d5192c2d-d0e8-41b5-8158-b6cdee71cb5e:99:28\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when X-Forwarded-For is not present",
        "name": "should return the remote address",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'address')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'address')\n    at getExpectedClientAddress (blob:http://localhost:9000/d5192c2d-d0e8-41b5-8158-b6cdee71cb5e:126:17)\n    at blob:http://localhost:9000/d5192c2d-d0e8-41b5-8158-b6cdee71cb5e:115:26\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.ips.js",
    "passed": 4,
    "failed": 0,
    "total": 4,
    "passRate": 100,
    "details": [
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should return an array of the specified addresses",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should stop at first untrusted",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is disabled",
        "name": "should return an empty array",
        "status": "passed"
      },
      {
        "suite": "when X-Forwarded-For is not present",
        "name": "should return []",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.is.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.path.js",
    "passed": 0,
    "failed": 1,
    "total": 1,
    "passRate": 0,
    "details": [
      {
        "suite": ".path",
        "name": "should return the parsed pathname",
        "status": "failed",
        "error": "Expected body /login but got /login?redirect=/post/1/comments",
        "stack": "Error: Expected body /login but got /login?redirect=/post/1/comments\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.protocol.js",
    "passed": 7,
    "failed": 0,
    "total": 7,
    "passRate": 100,
    "details": [
      {
        "suite": ".protocol",
        "name": "should return the protocol string",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should respect X-Forwarded-Proto",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should default to the socket addr if X-Forwarded-Proto not present",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should ignore X-Forwarded-Proto if socket addr not trusted",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is enabled",
        "name": "should default to http",
        "status": "passed"
      },
      {
        "suite": "when trusting hop count",
        "name": "should respect X-Forwarded-Proto",
        "status": "passed"
      },
      {
        "suite": "when \"trust proxy\" is disabled",
        "name": "should ignore X-Forwarded-Proto",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.query.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.range.js",
    "passed": 5,
    "failed": 2,
    "total": 7,
    "passRate": 71,
    "details": [
      {
        "suite": ".range(size)",
        "name": "should return parsed ranges",
        "status": "passed"
      },
      {
        "suite": ".range(size)",
        "name": "should cap to the given size",
        "status": "passed"
      },
      {
        "suite": ".range(size)",
        "name": "should cap to the given size when open-ended",
        "status": "passed"
      },
      {
        "suite": ".range(size)",
        "name": "should have a .type",
        "status": "failed",
        "error": "Expected body \"bytes\" but got bytes",
        "stack": "Error: Expected body \"bytes\" but got bytes\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".range(size)",
        "name": "should accept any type",
        "status": "failed",
        "error": "Expected body \"users\" but got users",
        "stack": "Error: Expected body \"users\" but got users\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".range(size)",
        "name": "should return undefined if no range",
        "status": "passed"
      },
      {
        "suite": "with \"combine: true\" option",
        "name": "should return combined ranges",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.route.js",
    "passed": 1,
    "failed": 0,
    "total": 1,
    "passRate": 100,
    "details": [
      {
        "suite": ".route",
        "name": "should be the executed Route",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.secure.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.signedCookies.js",
    "passed": 0,
    "failed": 1,
    "total": 1,
    "passRate": 0,
    "details": [
      {
        "suite": ".signedCookies",
        "name": "should return a signed JSON cookie",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'set-cookie')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'set-cookie')\n    at blob:http://localhost:9000/10a6f6de-057b-468a-b4a4-ce273ea1fb45:43:32\n    at Object.end (http://localhost:9000/examples/express-test-harness/:741:17)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.stale.js",
    "passed": 3,
    "failed": 0,
    "total": 3,
    "passRate": 100,
    "details": [
      {
        "suite": ".stale",
        "name": "should return false when the resource is not modified",
        "status": "passed"
      },
      {
        "suite": ".stale",
        "name": "should return true when the resource is modified",
        "status": "passed"
      },
      {
        "suite": ".stale",
        "name": "should return true without response headers",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "req.subdomains.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "req.xhr.js",
    "passed": 4,
    "failed": 0,
    "total": 4,
    "passRate": 100,
    "details": [
      {
        "suite": ".xhr",
        "name": "should return true when X-Requested-With is xmlhttprequest",
        "status": "passed"
      },
      {
        "suite": ".xhr",
        "name": "should case-insensitive",
        "status": "passed"
      },
      {
        "suite": ".xhr",
        "name": "should return false otherwise",
        "status": "passed"
      },
      {
        "suite": ".xhr",
        "name": "should return false when not present",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.append.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "res.attachment.js",
    "passed": 1,
    "failed": 4,
    "total": 5,
    "passRate": 20,
    "details": [
      {
        "suite": ".attachment()",
        "name": "should Content-Disposition to attachment",
        "status": "failed",
        "error": "Expected body Content-Disposition but got foo",
        "stack": "Error: Expected body Content-Disposition but got foo\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".attachment(filename)",
        "name": "should add the filename param",
        "status": "failed",
        "error": "Expected body Content-Disposition but got foo",
        "stack": "Error: Expected body Content-Disposition but got foo\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".attachment(filename)",
        "name": "should set the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got {\"_bytes\":{\"0\":0,\"1\":0,\"2\":0,\"3\":0},\"length\":4,\"_isBuffer\":true}",
        "stack": "Error: Expected body Content-Type but got {\"_bytes\":{\"0\":0,\"1\":0,\"2\":0,\"3\":0},\"length\":4,\"_isBuffer\":true}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".attachment(utf8filename)",
        "name": "should add the filename and filename* params",
        "status": "passed"
      },
      {
        "suite": ".attachment(utf8filename)",
        "name": "should set the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got japanese",
        "stack": "Error: Expected body Content-Type but got japanese\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.clearCookie.js",
    "passed": 4,
    "failed": 0,
    "total": 4,
    "passRate": 100,
    "details": [
      {
        "suite": ".clearCookie(name)",
        "name": "should set a cookie passed expiry",
        "status": "passed"
      },
      {
        "suite": ".clearCookie(name, options)",
        "name": "should set the given params",
        "status": "passed"
      },
      {
        "suite": ".clearCookie(name, options)",
        "name": "should ignore maxAge",
        "status": "passed"
      },
      {
        "suite": ".clearCookie(name, options)",
        "name": "should ignore user supplied expires param",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.cookie.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "res.format.js",
    "passed": 28,
    "failed": 10,
    "total": 38,
    "passRate": 74,
    "details": [
      {
        "suite": "with canonicalized mime types",
        "name": "should utilize qvalues in negotiation",
        "status": "passed"
      },
      {
        "suite": "with canonicalized mime types",
        "name": "should allow wildcard type/subtypes",
        "status": "passed"
      },
      {
        "suite": "with canonicalized mime types",
        "name": "should default the Content-Type",
        "status": "passed"
      },
      {
        "suite": "with canonicalized mime types",
        "name": "should set the correct charset for the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got <p>hey</p>",
        "stack": "Error: Expected body Content-Type but got <p>hey</p>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with canonicalized mime types",
        "name": "should Vary: Accept",
        "status": "failed",
        "error": "Expected body Vary but got hey",
        "stack": "Error: Expected body Vary but got hey\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when Accept is not present",
        "name": "should invoke the first callback",
        "status": "passed"
      },
      {
        "suite": "when no match is made",
        "name": "should respond with 406 not acceptable",
        "status": "passed"
      },
      {
        "suite": "with extnames",
        "name": "should utilize qvalues in negotiation",
        "status": "passed"
      },
      {
        "suite": "with extnames",
        "name": "should allow wildcard type/subtypes",
        "status": "passed"
      },
      {
        "suite": "with extnames",
        "name": "should default the Content-Type",
        "status": "passed"
      },
      {
        "suite": "with extnames",
        "name": "should set the correct charset for the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got <p>hey</p>",
        "stack": "Error: Expected body Content-Type but got <p>hey</p>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with extnames",
        "name": "should Vary: Accept",
        "status": "failed",
        "error": "Expected body Vary but got hey",
        "stack": "Error: Expected body Vary but got hey\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when Accept is not present",
        "name": "should invoke the first callback",
        "status": "passed"
      },
      {
        "suite": "when no match is made",
        "name": "should respond with 406 not acceptable",
        "status": "passed"
      },
      {
        "suite": "with parameters",
        "name": "should utilize qvalues in negotiation",
        "status": "passed"
      },
      {
        "suite": "with parameters",
        "name": "should allow wildcard type/subtypes",
        "status": "passed"
      },
      {
        "suite": "with parameters",
        "name": "should default the Content-Type",
        "status": "passed"
      },
      {
        "suite": "with parameters",
        "name": "should set the correct charset for the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got <p>hey</p>",
        "stack": "Error: Expected body Content-Type but got <p>hey</p>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "with parameters",
        "name": "should Vary: Accept",
        "status": "failed",
        "error": "Expected body Vary but got hey",
        "stack": "Error: Expected body Vary but got hey\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when Accept is not present",
        "name": "should invoke the first callback",
        "status": "passed"
      },
      {
        "suite": "when no match is made",
        "name": "should respond with 406 not acceptable",
        "status": "passed"
      },
      {
        "suite": "given .default",
        "name": "should be invoked instead of auto-responding",
        "status": "passed"
      },
      {
        "suite": "given .default",
        "name": "should work when only .default is provided",
        "status": "passed"
      },
      {
        "suite": "given .default",
        "name": "should be able to invoke other formatter",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should utilize qvalues in negotiation",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should allow wildcard type/subtypes",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should default the Content-Type",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should set the correct charset for the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got <p>hey</p>",
        "stack": "Error: Expected body Content-Type but got <p>hey</p>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "in router",
        "name": "should Vary: Accept",
        "status": "failed",
        "error": "Expected body Vary but got hey",
        "stack": "Error: Expected body Vary but got hey\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when Accept is not present",
        "name": "should invoke the first callback",
        "status": "passed"
      },
      {
        "suite": "when no match is made",
        "name": "should respond with 406 not acceptable",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should utilize qvalues in negotiation",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should allow wildcard type/subtypes",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should default the Content-Type",
        "status": "passed"
      },
      {
        "suite": "in router",
        "name": "should set the correct charset for the Content-Type",
        "status": "failed",
        "error": "Expected body Content-Type but got <p>hey</p>",
        "stack": "Error: Expected body Content-Type but got <p>hey</p>\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "in router",
        "name": "should Vary: Accept",
        "status": "failed",
        "error": "Expected body Vary but got hey",
        "stack": "Error: Expected body Vary but got hey\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": "when Accept is not present",
        "name": "should invoke the first callback",
        "status": "passed"
      },
      {
        "suite": "when no match is made",
        "name": "should respond with 406 not acceptable",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.get.js",
    "passed": 1,
    "failed": 0,
    "total": 1,
    "passRate": 100,
    "details": [
      {
        "suite": ".get(field)",
        "name": "should get the response header field",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.json.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "res.jsonp.js",
    "passed": 22,
    "failed": 2,
    "total": 24,
    "passRate": 92,
    "details": [
      {
        "suite": "res",
        "name": "should not override previous Content-Types",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should respond with jsonp",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should use first callback parameter with jsonp",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should ignore object callback parameter with jsonp",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should allow renaming callback",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should allow []",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should disallow arbitrary js",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should escape utf whitespace",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should not escape utf whitespace for json fallback",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should include security header and prologue",
        "status": "passed"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should not override previous Content-Types with no callback",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/7583fabe-81b6-4d07-8327-421f32cd7c0b:157:21\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": ".jsonp(object)",
        "name": "should override previous Content-Types with callback",
        "status": "passed"
      },
      {
        "suite": "when given undefined",
        "name": "should invoke callback with no arguments",
        "status": "passed"
      },
      {
        "suite": "when given null",
        "name": "should invoke callback with null",
        "status": "passed"
      },
      {
        "suite": "when given a string",
        "name": "should invoke callback with a string",
        "status": "passed"
      },
      {
        "suite": "when given a number",
        "name": "should invoke callback with a number",
        "status": "passed"
      },
      {
        "suite": "when given an array",
        "name": "should invoke callback with an array",
        "status": "passed"
      },
      {
        "suite": "when given an object",
        "name": "should invoke callback with an object",
        "status": "passed"
      },
      {
        "suite": "\"json escape\" setting",
        "name": "should be undefined by default",
        "status": "passed"
      },
      {
        "suite": "\"json escape\" setting",
        "name": "should unicode escape HTML-sniffing characters",
        "status": "passed"
      },
      {
        "suite": "\"json escape\" setting",
        "name": "should not break undefined escape",
        "status": "passed"
      },
      {
        "suite": "\"json replacer\" setting",
        "name": "should be passed to JSON.stringify()",
        "status": "passed"
      },
      {
        "suite": "\"json spaces\" setting",
        "name": "should be undefined by default",
        "status": "passed"
      },
      {
        "suite": "\"json spaces\" setting",
        "name": "should be passed to JSON.stringify()",
        "status": "failed",
        "error": "Expected body {\n  \"name\": \"tobi\",\n  \"age\": 2\n} but got {\"name\":\"tobi\",\"age\":2}",
        "stack": "Error: Expected body {\n  \"name\": \"tobi\",\n  \"age\": 2\n} but got {\"name\":\"tobi\",\"age\":2}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.links.js",
    "passed": 3,
    "failed": 0,
    "total": 3,
    "passRate": 100,
    "details": [
      {
        "suite": ".links(obj)",
        "name": "should set Link header field",
        "status": "passed"
      },
      {
        "suite": ".links(obj)",
        "name": "should set Link header field for multiple calls",
        "status": "passed"
      },
      {
        "suite": ".links(obj)",
        "name": "should set multiple links for single rel",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.locals.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "res.location.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution timeout"
  },
  {
    "suiteName": "res.redirect.js",
    "passed": 11,
    "failed": 2,
    "total": 13,
    "passRate": 85,
    "details": [
      {
        "suite": ".redirect(url)",
        "name": "should default to a 302 redirect",
        "status": "passed"
      },
      {
        "suite": ".redirect(url)",
        "name": "should encode \"url\"",
        "status": "passed"
      },
      {
        "suite": ".redirect(url)",
        "name": "should not touch already-encoded sequences in \"url\"",
        "status": "passed"
      },
      {
        "suite": ".redirect(status, url)",
        "name": "should set the response status",
        "status": "passed"
      },
      {
        "suite": "when the request method is HEAD",
        "name": "should ignore the body",
        "status": "failed",
        "error": "utils.shouldNotHaveBody is not a function",
        "stack": "TypeError: utils.shouldNotHaveBody is not a function\n    at blob:http://localhost:9000/6a9b1b19-e93a-4461-8da7-28b7aba3c540:92:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when accepting html",
        "name": "should respond with html",
        "status": "passed"
      },
      {
        "suite": "when accepting html",
        "name": "should escape the url",
        "status": "passed"
      },
      {
        "suite": "when accepting html",
        "name": "should not render evil javascript links in anchor href (prevent XSS)",
        "status": "passed"
      },
      {
        "suite": "when accepting html",
        "name": "should include the redirect type",
        "status": "passed"
      },
      {
        "suite": "when accepting text",
        "name": "should respond with text",
        "status": "passed"
      },
      {
        "suite": "when accepting text",
        "name": "should encode the url",
        "status": "passed"
      },
      {
        "suite": "when accepting text",
        "name": "should include the redirect type",
        "status": "passed"
      },
      {
        "suite": "when accepting neither text or html",
        "name": "should respond with an empty body",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/6a9b1b19-e93a-4461-8da7-28b7aba3c540:225:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.send.js",
    "passed": 55,
    "failed": 14,
    "total": 69,
    "passRate": 80,
    "details": [
      {
        "suite": "res",
        "name": "should always check regardless of length",
        "status": "passed"
      },
      {
        "suite": "res",
        "name": "should respond with 304 Not Modified when fresh",
        "status": "passed"
      },
      {
        "suite": "res",
        "name": "should not perform freshness check unless 2xx or 304",
        "status": "passed"
      },
      {
        "suite": "res",
        "name": "should not support jsonp callbacks",
        "status": "passed"
      },
      {
        "suite": "res",
        "name": "should be chainable",
        "status": "passed"
      },
      {
        "suite": ".send()",
        "name": "should set body to \"\"",
        "status": "passed"
      },
      {
        "suite": ".send(null)",
        "name": "should set body to \"\"",
        "status": "passed"
      },
      {
        "suite": ".send(undefined)",
        "name": "should set body to \"\"",
        "status": "passed"
      },
      {
        "suite": ".send(Number)",
        "name": "should send as application/json",
        "status": "passed"
      },
      {
        "suite": ".send(String)",
        "name": "should send as html",
        "status": "passed"
      },
      {
        "suite": ".send(String)",
        "name": "should set ETag",
        "status": "passed"
      },
      {
        "suite": ".send(String)",
        "name": "should not override Content-Type",
        "status": "passed"
      },
      {
        "suite": ".send(String)",
        "name": "should override charset in Content-Type",
        "status": "passed"
      },
      {
        "suite": ".send(String)",
        "name": "should keep charset in Content-Type for Buffers",
        "status": "failed",
        "error": "Expected body hi but got {\"_bytes\":{\"0\":104,\"1\":105},\"length\":2,\"_isBuffer\":true}",
        "stack": "Error: Expected body hi but got {\"_bytes\":{\"0\":104,\"1\":105},\"length\":2,\"_isBuffer\":true}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".send(Buffer)",
        "name": "should send as octet-stream",
        "status": "failed",
        "error": "Expected body false but got {\"_bytes\":{\"0\":104,\"1\":101,\"2\":108,\"3\":108,\"4\":111},\"length\":5,\"_isBuffer\":true}",
        "stack": "Error: Expected body false but got {\"_bytes\":{\"0\":104,\"1\":101,\"2\":108,\"3\":108,\"4\":111},\"length\":5,\"_isBuffer\":true}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".send(Buffer)",
        "name": "should set ETag",
        "status": "passed"
      },
      {
        "suite": ".send(Buffer)",
        "name": "should not override Content-Type",
        "status": "failed",
        "error": "Expected body hey but got {\"_bytes\":{\"0\":104,\"1\":101,\"2\":121},\"length\":3,\"_isBuffer\":true}",
        "stack": "Error: Expected body hey but got {\"_bytes\":{\"0\":104,\"1\":101,\"2\":121},\"length\":3,\"_isBuffer\":true}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".send(Buffer)",
        "name": "should accept Uint8Array",
        "status": "passed"
      },
      {
        "suite": ".send(Buffer)",
        "name": "should not override ETag",
        "status": "failed",
        "error": "Expected body hey but got {\"_bytes\":{\"0\":104,\"1\":101,\"2\":121},\"length\":3,\"_isBuffer\":true}",
        "stack": "Error: Expected body hey but got {\"_bytes\":{\"0\":104,\"1\":101,\"2\":121},\"length\":3,\"_isBuffer\":true}\n    at Object.end (http://localhost:9000/examples/express-test-harness/:722:29)"
      },
      {
        "suite": ".send(Object)",
        "name": "should send as application/json",
        "status": "passed"
      },
      {
        "suite": "when the request method is HEAD",
        "name": "should ignore the body",
        "status": "failed",
        "error": "utils.shouldNotHaveBody is not a function",
        "stack": "TypeError: utils.shouldNotHaveBody is not a function\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:250:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when .statusCode is 204",
        "name": "should strip Content-* fields, Transfer-Encoding field, and body",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:265:21\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when .statusCode is 205",
        "name": "should strip Transfer-Encoding field and body, set Content-Length",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:282:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when .statusCode is 304",
        "name": "should strip Content-* fields, Transfer-Encoding field, and body",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:298:21\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to ACL request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to BIND request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to CHECKOUT request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to COPY request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to DELETE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to GET request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to HEAD request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to LINK request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to LOCK request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to M-SEARCH request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to MERGE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to MKACTIVITY request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to MKCALENDAR request",
        "status": "failed",
        "error": "request(...)[method] is not a function",
        "stack": "TypeError: request(...)[method] is not a function\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:408:19\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to MKCOL request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to MOVE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to NOTIFY request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to OPTIONS request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to PATCH request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to POST request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to PRI request",
        "status": "failed",
        "error": "request(...)[method] is not a function",
        "stack": "TypeError: request(...)[method] is not a function\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:408:19\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to PROPFIND request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to PROPPATCH request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to PURGE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to PUT request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to REBIND request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to REPORT request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to SEARCH request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to SOURCE request",
        "status": "failed",
        "error": "request(...)[method] is not a function",
        "stack": "TypeError: request(...)[method] is not a function\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:408:19\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to SUBSCRIBE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to TRACE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to UNBIND request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to UNLINK request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to UNLOCK request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag in response to UNSUBSCRIBE request",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag for empty string response",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should send ETag for long response",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should not override ETag when manually set",
        "status": "passed"
      },
      {
        "suite": "when enabled",
        "name": "should not send ETag for res.send()",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:472:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when disabled",
        "name": "should send no ETag",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:490:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "when disabled",
        "name": "should send ETag when manually set",
        "status": "passed"
      },
      {
        "suite": "when \"strong\"",
        "name": "should send strong ETag",
        "status": "passed"
      },
      {
        "suite": "when \"weak\"",
        "name": "should send weak ETag",
        "status": "passed"
      },
      {
        "suite": "when a function",
        "name": "should send custom ETag",
        "status": "passed"
      },
      {
        "suite": "when a function",
        "name": "should not send falsy ETag",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/70bdfe08-cadf-4c1f-9600-a9935def7c79:580:23\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.sendStatus.js",
    "passed": 3,
    "failed": 0,
    "total": 3,
    "passRate": 100,
    "details": [
      {
        "suite": ".sendStatus(statusCode)",
        "name": "should send the status code and message as body",
        "status": "passed"
      },
      {
        "suite": ".sendStatus(statusCode)",
        "name": "should work with unknown code",
        "status": "passed"
      },
      {
        "suite": ".sendStatus(statusCode)",
        "name": "should raise error for invalid status code",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.set.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "res.status.js",
    "passed": 16,
    "failed": 0,
    "total": 16,
    "passRate": 100,
    "details": [
      {
        "suite": ".status(code)",
        "name": "should set the status code when valid",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 101",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 201",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 302",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 403",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 501",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 700",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 800",
        "status": "passed"
      },
      {
        "suite": "accept valid ranges",
        "name": "should set the response status code to 900",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for status code below 100",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for status code above 999",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for non-integer status codes",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for undefined status code",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for null status code",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for string status code",
        "status": "passed"
      },
      {
        "suite": "invalid status codes",
        "name": "should raise error for NaN status code",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "res.type.js",
    "passed": 0,
    "failed": 0,
    "total": 0,
    "passRate": 0,
    "details": [],
    "hasError": true,
    "errorMsg": "Test execution failed - no result"
  },
  {
    "suiteName": "res.vary.js",
    "passed": 4,
    "failed": 1,
    "total": 5,
    "passRate": 80,
    "details": [
      {
        "suite": "with no arguments",
        "name": "should throw error",
        "status": "passed"
      },
      {
        "suite": "with an empty array",
        "name": "should not set Vary",
        "status": "failed",
        "error": "Cannot read properties of undefined (reading 'toLowerCase')",
        "stack": "TypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at Object.shouldNotHaveHeader (http://localhost:9000/examples/express-test-harness/test-utils.js:223:32)\n    at blob:http://localhost:9000/3a6e5206-c18a-43f7-88c8-f484bf092074:50:21\n    at http://localhost:9000/examples/express-test-harness/test-executor.js:486:26\n    at new Promise (<anonymous>)\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:458:14)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "with an array",
        "name": "should set the values",
        "status": "passed"
      },
      {
        "suite": "with a string",
        "name": "should set the value",
        "status": "passed"
      },
      {
        "suite": "when the value is present",
        "name": "should not add it again",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  },
  {
    "suiteName": "utils.js",
    "passed": 6,
    "failed": 8,
    "total": 14,
    "passRate": 43,
    "details": [
      {
        "suite": "utils.etag(body, encoding)",
        "name": "should support strings",
        "status": "failed",
        "error": "Expected \"\\\"8-VKTOLQ==\\\"\" to be \"\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"",
        "stack": "Error: Expected \"\\\"8-VKTOLQ==\\\"\" to be \"\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"\n    at Object.toBe (http://localhost:9000/examples/express-test-harness/:349:19)\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:25:36\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:24)\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:128:18"
      },
      {
        "suite": "utils.etag(body, encoding)",
        "name": "should support utf8 strings",
        "status": "failed",
        "error": "utils.etag(...).toBe is not a function",
        "stack": "TypeError: utils.etag(...).toBe is not a function\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:29:35\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.etag(body, encoding)",
        "name": "should support buffer",
        "status": "failed",
        "error": "Expected \"\\\"8-VKTOLQ==\\\"\" to be \"\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"",
        "stack": "Error: Expected \"\\\"8-VKTOLQ==\\\"\" to be \"\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"\n    at Object.toBe (http://localhost:9000/examples/express-test-harness/:349:19)\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:34:49\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.etag(body, encoding)",
        "name": "should support empty string",
        "status": "passed"
      },
      {
        "suite": "utils.normalizeType acceptParams method",
        "name": "should handle a type with a malformed parameter and break the loop in acceptParams",
        "status": "passed"
      },
      {
        "suite": "utils.setCharset(type, charset)",
        "name": "should do anything without type",
        "status": "passed"
      },
      {
        "suite": "utils.setCharset(type, charset)",
        "name": "should return type if not given charset",
        "status": "passed"
      },
      {
        "suite": "utils.setCharset(type, charset)",
        "name": "should keep charset if not given charset",
        "status": "passed"
      },
      {
        "suite": "utils.setCharset(type, charset)",
        "name": "should set charset",
        "status": "failed",
        "error": "utils.setCharset(...).toBe is not a function",
        "stack": "TypeError: utils.setCharset(...).toBe is not a function\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:68:42\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.setCharset(type, charset)",
        "name": "should override charset",
        "status": "failed",
        "error": "utils.setCharset(...).toBe is not a function",
        "stack": "TypeError: utils.setCharset(...).toBe is not a function\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:72:62\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.wetag(body, encoding)",
        "name": "should support strings",
        "status": "failed",
        "error": "Expected \"W/\\\"8-VKTOLQ==\\\"\" to be \"W/\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"",
        "stack": "Error: Expected \"W/\\\"8-VKTOLQ==\\\"\" to be \"W/\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"\n    at Object.toBe (http://localhost:9000/examples/express-test-harness/:349:19)\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:78:37\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:18)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.wetag(body, encoding)",
        "name": "should support utf8 strings",
        "status": "failed",
        "error": "utils.wetag(...).toBe is not a function",
        "stack": "TypeError: utils.wetag(...).toBe is not a function\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:82:36\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.wetag(body, encoding)",
        "name": "should support buffer",
        "status": "failed",
        "error": "Expected \"W/\\\"8-VKTOLQ==\\\"\" to be \"W/\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"",
        "stack": "Error: Expected \"W/\\\"8-VKTOLQ==\\\"\" to be \"W/\\\"8-O2uVAFaQ1rZvlKLT14RnuvjPIdg\\\"\"\n    at Object.toBe (http://localhost:9000/examples/express-test-harness/:349:19)\n    at blob:http://localhost:9000/8f484bec-3d13-40db-8982-10d1ce7f9abf:87:50\n    at TestExecutor.runHookOrTest (http://localhost:9000/examples/express-test-harness/test-executor.js:516:28)\n    at TestExecutor.runTestSuite (http://localhost:9000/examples/express-test-harness/test-executor.js:402:20)\n    at async TestExecutor.waitForTestCompletion (http://localhost:9000/examples/express-test-harness/test-executor.js:362:7)\n    at async handleComplete (http://localhost:9000/examples/express-test-harness/test-executor.js:81:13)"
      },
      {
        "suite": "utils.wetag(body, encoding)",
        "name": "should support empty string",
        "status": "passed"
      }
    ],
    "hasError": false,
    "errorMsg": null
  }
]